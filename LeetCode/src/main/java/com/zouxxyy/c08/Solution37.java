package com.zouxxyy.c08;

/*
837. 新21点
爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。

当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？



示例 1：

输入：N = 10, K = 1, W = 10
输出：1.00000
说明：爱丽丝得到一张卡，然后停止。
示例 2：

输入：N = 6, K = 1, W = 10
输出：0.60000
说明：爱丽丝得到一张卡，然后停止。
在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
示例 3：

输入：N = 21, K = 17, W = 10
输出：0.73278


提示：

0 <= K <= N <= 10000
1 <= W <= 10000
如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
此问题的判断限制时间已经减少。
 */

/*
笔记：

从后往前 dp
 */

import java.util.Arrays;

/**
 * @author zxy
 */
public class Solution37 {

    public double new21Game(int N, int K, int W) {

        // 子问题：dp[i] 代表分数为 i 时，继续游戏得分小于等于 N 的概率
        // 转移方程：dp[i] = (dp[i + 1] + dp[i + 2] + ... + dp[i + W]) / W
        // 定义 s = dp[i + 1] + ... + dp[i + W]
        // 计算顺序：由大到小

        double[] dp = new double[K + W];
        Arrays.fill(dp, K, Math.min(K + W, N + 1), 1);

        double s = Math.min(K + W, N) - K + 1;

        for (int i = K - 1; i >= 0; i--) {
            dp[i] = s / W;
            s += dp[i] - dp[i + W];
        }

        return dp[0];
    }

}
